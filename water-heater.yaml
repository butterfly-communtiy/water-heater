# GPIO2  SPI CLK   屏幕
# GPIO3                       温度传感器 ADC
# GPIO4                       加热继电器
# GPIO5  SPI MOSI  屏幕
# GPIO6  SPI DC    屏幕
# GPIO7  SPI CS    屏幕
# GPIO8  SPI RESET 屏幕
# GPIO10                      加热提醒
# GPIO18                      蓝色 LED
# GPIO19                      红色 LED


esphome:
  name: "water-heater"
  friendly_name: Water-Heater
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32-c3-devkitm-1
  variant: ESP32C3
  framework:
    type: esp-idf


logger: 
  level: VERBOSE

api:
  encryption:
    key: !secret ha_key

ota:
  password: !secret ota_key

web_server:
  port: 80
  auth:
    username: !secret web_username
    password: !secret web_password

mqtt:
  broker: bemfa.com
  port: 9501
  client_id: !secret bemfa_client_id
  username: ''
  password: ''
  topic_prefix: null
  on_message: 
    - topic: "waterheaterpower001"
      then: 
        - if:
            condition: 
              lambda: 'return x == "on";'
            then:
              - switch.turn_on: heating_control
            else:
              - switch.turn_off: heating_control

    - topic: "waterheaterpower004"
      then: 

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "Water Heater Fallback Hotspot"
    password: !secret ap_password

captive_portal:


globals:
  - id: led_mode
    type: int
    initial_value: '0'

  - id: led_last_mode
    type: int
    initial_value: '-1' 
    

sensor:
  - platform: ntc
    sensor: resistance_sensor
    id: current_temperature
    calibration:
      b_constant: 3435
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: 'Current Temperature'
    on_value:
      then:
        - if:
            condition:
              and:
                - switch.is_on: heating_control
                - lambda: 'return x < 10 || x > 80 || x >= id(target_temperature).state;'
            then:
              - switch.turn_off: heating_control
        - mqtt.publish: 
            topic: 'waterheaterpower004'
            payload: !lambda |-
              return "#" + std::to_string((int)x);

  - platform: resistance
    id: resistance_sensor
    sensor: source_sensor
    configuration: DOWNSTREAM
    resistor: 100kOhm
    reference_voltage: 5v

  - platform: adc
    id: source_sensor
    pin: GPIO3
    update_interval: 30s
    attenuation: auto

spi:
  clk_pin: GPIO2
  mosi_pin: GPIO5
  
display:
  - platform: st7735
    model: "INITR_GREENTAB"
    reset_pin: GPIO8
    cs_pin: GPIO7
    dc_pin: GPIO6
    rotation: 0
    device_width: 128
    device_height: 128
    col_start: 0
    row_start: 3
    use_bgr: true
    eight_bit_color: false
    update_interval: 1s
    lambda: |-
      // 显示加热状态
      it.printf(0, 20, id(font_x), " Heating:  %s", id(heating_control).state ? "On" : "Off");
      // 显示当前温度
      it.printf(0, 50, id(font_x), " Current:  %.1f °C", id(current_temperature).state);
      // 显示目标温度
      it.printf(0, 80, id(font_x), " Target:    %.1f °C", id(target_temperature).state);

font:
  - file: "gfonts://Noto Sans SC"
    id: font_x
    size: 18
    bpp: 8

# image:
#   - file: "ran.jpg"
#     id: esphome_logo
#     resize: 128x128
#     type: RGBA

switch:
  - platform: gpio
    pin: GPIO4
    id: heating_control
    restore_mode: ALWAYS_OFF
    on_turn_on: 
      then:
        - mqtt.publish: 
            topic: 'waterheaterpower001/set'
            payload: 'on'
            qos: 1
        - lambda: 'id(led_mode) = 1;'
        - switch.turn_on: heating_beep
    on_turn_off: 
      then:
        - mqtt.publish: 
            topic: 'waterheaterpower001/set'
            payload: 'off'
            qos: 1
        - lambda: 'id(led_mode) = 0;'
        - switch.turn_on: heating_beep

    name: 'Heat Switch'

  - platform: gpio
    pin: GPIO10
    id: heating_beep
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: 200ms
      - switch.turn_off: heating_beep

number:
  - platform: template 
    max_value: 70
    min_value: 10
    step: 1
    id: target_temperature
    initial_value: 60
    optimistic: true
    name: 'Target temperature'
    set_action:
      - lambda: |-
          ESP_LOGD("main", "Set action triggered. Target temperature set to: %.1f", x);
    

output:
  - platform: gpio
    pin:
      number: GPIO18
      inverted: true
    id: led_blue_gpio
     
  - platform: gpio
    pin:
      number: GPIO19
      inverted: true
    id: led_red_gpio

light:
  - platform: binary
    output: led_blue_gpio
    id: led_blue_light

  - platform: binary
    output: led_red_gpio
    id: led_red_light
    effects:
      - strobe:
          name: Strobe
          colors:
            - state: true
              duration: 1s
            - state: false
              duration: 1s

interval:
  - interval: 1s
    then:
      - if:
          condition:
            lambda: 'return !id(heating_control).state;'
          then:
            - lambda: |-
                if (id(current_temperature).state <= id(target_temperature).state) {
                  id(led_mode) = 0;
                } else {
                  id(led_mode) = 2;
                }
      - if:
          condition:
            - lambda: |-
                if (id(led_mode) == id(led_last_mode)) {
                  return false;
                } else {
                  id(led_last_mode) = id(led_mode);
                  return true;
                }
          then: 
            - light.turn_off: led_red_light
            - light.turn_off: led_blue_light
            - if:
                condition:
                  lambda: 'return id(led_mode) == 0;'
                then:
                  - lambda: 'ESP_LOGD("main", "LED run mode 0");'
                  - light.turn_on: led_blue_light
            - if:
                condition:
                  lambda: 'return id(led_mode) == 1;'
                then:
                  - lambda: 'ESP_LOGD("main", "LED run mode 1");'
                  - light.turn_on:
                      id: led_red_light
                      effect: Strobe
            - if:
                condition:
                  lambda: 'return id(led_mode) == 2;'
                then:
                  - lambda: 'ESP_LOGD("main", "LED run mode 2");'
                  - light.turn_on: led_red_light